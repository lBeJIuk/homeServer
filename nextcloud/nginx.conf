
worker_processes auto; #some last versions calculate it automatically

worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

events {
    worker_connections 4000;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_tokens off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    ### DDOS PROTECTION ###

    # limit the number of connections per single IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # limit the number of requests for a given session
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # zone which we want to limit by upper values, we want limit whole server
    server {
        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;
    }

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size  128k;

    # buffer size for reading client request header -- for testing environment
    client_header_buffer_size 3m;

    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 256k;

    # how long to wait for the client to send a request header -- for testing environment
    client_header_timeout 3m;

    # GZIP
    gzip on;
    gzip_disable "MSIE [1-6]\\.(?!.*SV1)";
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_types image/jpeg text/plain text/css application/javascript application/x-javascript text/xml application/xml application/rss+xml text/javascript image/x-icon image/bmp image/svg+xml;
    gzip_vary on;



     server {
				listen       8081;
				server_name  collabora.zarva.me;

				# static files
				location ^~ /loleaflet {
						proxy_pass http://collabora:9980;
						proxy_set_header Host $http_host;
				}

				# WOPI discovery URL
				location ^~ /hosting/discovery {
						proxy_pass http://collabora:9980;
						proxy_set_header Host $http_host;
				}

				# Capabilities
				location ^~ /hosting/capabilities {
						proxy_pass http://collabora:9980;
						proxy_set_header Host $http_host;
				}

				# main websocket
				location ~ ^/lool/(.*)/ws$ {
						proxy_pass http://collabora:9980;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection "Upgrade";
						proxy_set_header Host $http_host;
						proxy_read_timeout 36000s;
				}

				# download, presentation and image upload
				location ~ ^/lool {
						proxy_pass http://collabora:9980;
						proxy_set_header Host $http_host;
				}

				# Admin Console websocket
				location ^~ /lool/adminws {
						proxy_pass http://collabora:9980;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection "Upgrade";
						proxy_set_header Host $http_host;
						proxy_read_timeout 36000s;
				}
		}

    server {
      listen 8080;
      root /var/www/html;
      server_name nextcloud.zarva.me;

      # Remove X-Powered-By, which is an information leak
      fastcgi_hide_header X-Powered-By;

      # set max upload size
      client_max_body_size 512M;
      fastcgi_buffers 64 4K;

      # Enable gzip but do not remove ETag headers
      gzip_min_length 256;
      gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
      gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

      index index.php index.html /index.php$request_uri;
      # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
      location = / {
        if ( $http_user_agent ~ ^DavClnt ) {
            return 302 https://nextcloud.zarva.me/remote.php/webdav/$is_args$args;
        }
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      # Make a regex exception for `/.well-known` so that clients can still
      # access it despite the existence of the regex rule
      # `location ~ /(\.|autotest|...)` which would otherwise handle requests
      # for `/.well-known`.
      location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 https://nextcloud.zarva.me/remote.php/dav/; }
        location = /.well-known/caldav  { return 301 https://nextcloud.zarva.me/remote.php/dav/; }

        location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 https://nextcloud.zarva.me/index.php$request_uri;
      }

      # Rule borrowed from `.htaccess`
      location /remote {
        return 301 https://nextcloud.zarva.me/remote.php$request_uri;
      }

      location / {
        try_files $uri $uri/ /index.php$request_uri;
      }

      location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
          deny all;
      }
      location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) {
          deny all;
      }

      location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-provider\/.+)\.php(?:$|\/) {
          fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
          fastcgi_param HTTPS on;
          #Avoid sending the security headers twice
          fastcgi_param modHeadersAvailable true;
          fastcgi_param front_controller_active true;
          fastcgi_pass nextcloud:9000;
          fastcgi_intercept_errors on;
          fastcgi_request_buffering off;
      }

      location ~ ^\/(?:updater|ocs-provider)(?:$|\/) {
          try_files $uri/ =404;
          index index.php;
      }

      # Adding the cache control header for js, css and map files
      # Make sure it is BELOW the PHP block
      location ~ \.(?:css|js|woff2?|svg|gif|map)$ {
          try_files $uri /index.php$request_uri;
          add_header Cache-Control "public, max-age=15778463";
          # Add headers to serve security related headers (It is intended to
          # have those duplicated to the ones above)
          # Before enabling Strict-Transport-Security headers please read into
          # this topic first.
          # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
          #
          # WARNING: Only add the preload option once you read about
          # the consequences in https://hstspreload.org/. This option
          # will add the domain to a hardcoded list that is shipped
          # in all major browsers and getting removed from this list
          # could take several months.

          # Optional: Don't log access to assets
          access_log off;
      }

      location ~ \.(?:png|html|ttf|ico|jpg|jpeg)$ {
          try_files $uri /index.php$request_uri;
          # Optional: Don't log access to other assets
          access_log off;
      }
    }
}
